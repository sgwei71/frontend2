name: Frontend2 Docker Image CI/CD Pipeline

# main 브랜치에 push할 때마다 실행
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      # 1단계: 코드 체크아웃
      - name: Check out the code
        uses: actions/checkout@v4

      # 2단계: Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3단계: Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        run: |
          # .env 디렉토리 생성
          # mkdir -p ./src/env
          
          # .env 파일 생성
          # echo "${{ secrets.ENV }}" > ./src/env/.env

          # Docker 이미지를 빌드하고, 'latest' 태그를 붙여 Docker Hub에 푸시합니다.
          docker build -t ${{ secrets.DOCKER_USERNAME }}/dashboard_frontend2:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/dashboard_frontend2:latest

      # 4단계: SSH를 통해 서버에 접속하여 애플리케이션 배포
      - name: SSH and Deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 1022
          script: |
            # 최신 Docker 이미지를 미리 서버에 가져옵니다.
            docker pull ${{ secrets.DOCKER_USERNAME }}/dashboard_frontend2:latest
            
            # 기존에 실행 중인 컨테이너가 있다면 중지하고 삭제합니다.
            if docker ps -q -f name=frontend2; then
              docker stop frontend2
              docker wait frontend2  # 컨테이너가 종료될 때까지 기다림
              docker rm frontend2    # 종료된 후 컨테이너 제거
            fi
            
            # 새로운 컨테이너를 실행합니다.
            docker run -d -e TZ=Asia/Seoul --restart always --name frontend2 -p 3001:3001 ${{ secrets.DOCKER_USERNAME }}/dashboard_frontend2:latest
            
            # 사용하지 않는 Docker 이미지 제거
            docker image prune -f